'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (req, res) {
  req.logger.debug('Parsing xlsx content');
  var contentString = res.content.toString();
  var $xlsxTemplate = void 0;
  var $files = void 0;
  try {
    var content = JSON.parse(contentString);
    $xlsxTemplate = content.$xlsxTemplate;
    $files = content.$files;
  } catch (e) {
    req.logger.warn('Unable to parse xlsx template JSON string (maybe you are missing {{{xlsxPrint}}} at the end?): \n' + contentString.substring(0, 100) + '... \n' + e.stack);
    return (0, _fallback2.default)(e, req, res);
  }

  var files = Object.keys($xlsxTemplate).map(function (k) {
    if (k.includes('xl/media/') || k.includes('.bin')) {
      return {
        path: k,
        data: new Buffer($xlsxTemplate[k], 'base64')
      };
    }

    if (k.includes('.xml')) {
      var xmlAndFiles = (0, _jsonToXml2.default)($xlsxTemplate[k]);
      var fullXml = xmlAndFiles.xml;

      if (fullXml.indexOf('&&') < 0) {
        return {
          path: k,
          data: new Buffer(fullXml, 'utf8')
        };
      }

      var xmlStream = (0, _merge2.default)();

      if (fullXml.indexOf('&&') < 0) {
        return {
          path: k,
          data: new Buffer(fullXml, 'utf8')
        };
      }

      var xml = fullXml;

      while (xml) {
        var separatorIndex = xml.indexOf('&&');

        if (separatorIndex < 0) {
          xmlStream.add(stringToStream(xml));
          xml = '';
          continue;
        }

        xmlStream.add(stringToStream(xml.substring(0, separatorIndex)));
        xmlStream.add(_fs2.default.createReadStream($files[xmlAndFiles.files.shift()]).pipe(_zlib2.default.createInflate()));
        xml = xml.substring(separatorIndex + '&&'.length);
      }

      return {
        path: k,
        data: xmlStream
      };
    }

    return {
      path: k,
      data: new Buffer($xlsxTemplate[k], 'utf8')
    };
  });

  return new _bluebird2.default(function (resolve, reject) {
    var id = _uuid2.default.v1();
    var xlsxFileName = _path2.default.join(req.reporter.options.tempDirectory, id + '.xlsx');
    req.logger.debug('Zipping prepared xml files into ' + xlsxFileName);
    var archive = (0, _archiver2.default)('zip');
    var output = _fs2.default.createWriteStream(xlsxFileName);

    output.on('close', function () {
      req.logger.debug('Successfully zipped now.');
      res.stream = _fs2.default.createReadStream(xlsxFileName);
      (0, _responseXlsx2.default)(req, res).then(function () {
        return resolve();
      }).catch(function (e) {
        return reject(e);
      });
    });

    archive.on('error', function (err) {
      return reject(err);
    });

    archive.pipe(output);
    files.forEach(function (f) {
      return archive.append(f.data, { name: f.path });
    });
    archive.finalize();
  });
};

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _archiver = require('archiver');

var _archiver2 = _interopRequireDefault(_archiver);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _fallback = require('./fallback.js');

var _fallback2 = _interopRequireDefault(_fallback);

var _responseXlsx = require('./responseXlsx.js');

var _responseXlsx2 = _interopRequireDefault(_responseXlsx);

var _jsonToXml = require('./jsonToXml.js');

var _jsonToXml2 = _interopRequireDefault(_jsonToXml);

var _stream = require('stream');

var _stream2 = _interopRequireDefault(_stream);

var _zlib = require('zlib');

var _zlib2 = _interopRequireDefault(_zlib);

var _merge = require('merge2');

var _merge2 = _interopRequireDefault(_merge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var stringToStream = function stringToStream(str) {
  var s = new _stream2.default.Readable();
  s.push(str);
  s.push(null);
  return s;
};