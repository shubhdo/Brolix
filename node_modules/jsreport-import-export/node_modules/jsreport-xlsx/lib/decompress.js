// taken from https://github.com/kevva/decompress-unzip

/* eslint-disable */

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var fileType = require('file-type');
var getStream = require('get-stream');
var pify = require('pify');
var yauzl = require('yauzl');

var getType = function getType(entry, mode) {
  var IFMT = 61440;
  var IFDIR = 16384;
  var IFLNK = 40960;
  var madeBy = entry.versionMadeBy >> 8;

  if ((mode & IFMT) === IFLNK) {
    return 'symlink';
  }

  if ((mode & IFMT) === IFDIR || madeBy === 0 && entry.externalFileAttributes === 16) {
    return 'directory';
  }

  return 'file';
};

var extractEntry = function extractEntry(entry, zip) {
  var file = {
    mode: entry.externalFileAttributes >> 16 & 0xFFFF,
    mtime: entry.getLastModDate(),
    path: entry.fileName
  };

  file.type = getType(entry, file.mode);

  if (file.mode === 0 && file.type === 'directory') {
    file.mode = 493;
  }

  if (file.mode === 0) {
    file.mode = 420;
  }

  return pify(zip.openReadStream.bind(zip))(entry).then(getStream.buffer).then(function (buf) {
    file.data = buf;

    if (file.type === 'symlink') {
      file.linkname = buf.toString();
    }

    return file;
  }).catch(function (err) {
    zip.close();
    throw err;
  });
};

var extractFile = function extractFile(zip) {
  return new Promise(function (resolve, reject) {
    var files = [];

    zip.readEntry();

    zip.on('entry', function (entry) {
      extractEntry(entry, zip).catch(reject).then(function (file) {
        files.push(file);
        zip.readEntry();
      });
    });

    zip.on('error', reject);
    zip.on('end', function () {
      return resolve(files);
    });
  });
};

module.exports = function () {
  return function (buf) {
    if (!Buffer.isBuffer(buf)) {
      return Promise.reject(new TypeError('Expected a Buffer, got ' + (typeof buf === 'undefined' ? 'undefined' : _typeof(buf))));
    }

    if (!fileType(buf) || fileType(buf).ext !== 'zip') {
      return Promise.resolve([]);
    }

    return pify(yauzl.fromBuffer)(buf, { lazyEntries: true }).then(extractFile);
  };
};